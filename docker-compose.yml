# 실행: docker compose up
version: '3.1'

services:
  gateway: # 서비스명
    build:
      context: . # 현재 위치로부터
      dockerfile: ./apps/gateway/Dockerfile
      target: development # docker-compose는 개발단계에서만 사용할 것이므로 (development stage까지만 실행)
    command: pnpm run start:dev gateway # 커맨드 오버라이드
    env_file:
      - ./apps/gateway/.env
    ports:
      - '3000:3000' # 3001: 내 PC의 포트 / 3000: 컨테이너 안의 포트 => Proxy
    volumes: # 동기화 (HMR을 위해서, 개발용)
      - .:/usr/src/app # .: 내 PC의 위치 / /user/src/app: 컨테이너 안의 위치
      - /usr/src/app/node_modules # 동기화를 안하겠다는 의미 (:이 없는 경우) 내 PC의 os 환경과 docker의 os 환경이 일치하지 않은 경우, 다른 모듈이 설치될 수 있기 때문임

  user: # 서비스명
    build:
      context: . # 현재 위치로부터
      dockerfile: ./apps/user/Dockerfile
      target: development # docker-compose는 개발단계에서만 사용할 것이므로 (development stage까지만 실행)
    command: pnpm run start:dev user # 커맨드 오버라이드
    depends_on:
      postgres_user: # 아래의 postgres_user 서비스에 의존
        condition: service_healthy
    env_file:
      - ./apps/user/.env
    # ports:
    #   - '3001:3000' # 3001: 내 PC의 포트 / 3000: 컨테이너 안의 포트 => Proxy
    volumes: # 동기화 (HMR을 위해서, 개발용)
      - .:/usr/src/app # .: 내 PC의 위치 / /user/src/app: 컨테이너 안의 위치
      - /usr/src/app/node_modules # 동기화를 안하겠다는 의미 (:이 없는 경우) 내 PC의 os 환경과 docker의 os 환경이 일치하지 않은 경우, 다른 모듈이 설치될 수 있기 때문임
  postgres_user:
    image: postgres:16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - '6001:5432'
    volumes:
      - ./postgres/user:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s

  product:
    build:
      context: .
      dockerfile: ./apps/product/Dockerfile
      target: development
    command: pnpm run start:dev product
    depends_on:
      postgres_product:
        condition: service_healthy
    env_file:
      - ./apps/product/.env
    # ports:
    #   - '3002:3000'
    volumes:
      - .:/usr/src/app # .: 내 PC의 위치 / /user/src/app: 컨테이너 안의 위치
      - /usr/src/app/node_modules # 동기화를 안하겠다는 의미 (:이 없는 경우) 내 PC의 os 환경과 docker의 os 환경이 일치하지 않은 경우, 다른 모듈이 설치될 수 있기 때문임
  postgres_product:
    image: postgres:16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - '6002:5432'
    volumes:
      - ./postgres/product:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s

  order:
    build:
      context: .
      dockerfile: ./apps/order/Dockerfile
      target: development
    command: pnpm run start:dev order
    depends_on:
      mongo_order:
        condition: service_healthy
    env_file:
      - ./apps/order/.env
    # ports:
    #   - '3003:3000'
    volumes:
      - .:/usr/src/app # .: 내 PC의 위치 / /user/src/app: 컨테이너 안의 위치
      - /usr/src/app/node_modules # 동기화를 안하겠다는 의미 (:이 없는 경우) 내 PC의 os 환경과 docker의 os 환경이 일치하지 않은 경우, 다른 모듈이 설치될 수 있기 때문임
  mongo_order:
    image: mongo:8
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo
      MONGO_INITDB_ROOT_PASSWORD: mongo
    ports:
      - '6003:27017'
    volumes:
      - ./mongo/order:/data/lib
    command: mongod --quiet --logpath /dev/null
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s

  payment:
    build:
      context: .
      dockerfile: ./apps/payment/Dockerfile
      target: development
    command: pnpm run start:dev payment
    depends_on:
      postgres_payment:
        condition: service_healthy
    env_file:
      - ./apps/payment/.env
    # ports:
    #   - '3004:3000'
    volumes:
      - .:/usr/src/app # .: 내 PC의 위치 / /user/src/app: 컨테이너 안의 위치
      - /usr/src/app/node_modules # 동기화를 안하겠다는 의미 (:이 없는 경우) 내 PC의 os 환경과 docker의 os 환경이 일치하지 않은 경우, 다른 모듈이 설치될 수 있기 때문임
  postgres_payment:
    image: postgres:16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - '6004:5432'
    volumes:
      - ./postgres/payment:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s

  notification:
    build:
      context: .
      dockerfile: ./apps/notification/Dockerfile
      target: development
    command: pnpm run start:dev notification
    depends_on:
      mongo_notification:
        condition: service_healthy
    env_file:
      - ./apps/notification/.env
    # ports:
    #   - '3005:3000'
    volumes:
      - .:/usr/src/app # .: 내 PC의 위치 / /user/src/app: 컨테이너 안의 위치
      - /usr/src/app/node_modules # 동기화를 안하겠다는 의미 (:이 없는 경우) 내 PC의 os 환경과 docker의 os 환경이 일치하지 않은 경우, 다른 모듈이 설치될 수 있기 때문임
  mongo_notification:
    image: mongo:8
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo
      MONGO_INITDB_ROOT_PASSWORD: mongo
    ports:
      - '6005:27017'
    volumes:
      - ./mongo/notification:/data/lib
    command: mongod --quiet --logpath /dev/null
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s

  redis:
    image: redis:7
